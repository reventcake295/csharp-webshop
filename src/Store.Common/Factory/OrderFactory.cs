using Store.Common.Enums;
using Store.Common.Interfaces;
using Store.Common.Model;

namespace Store.Common.Factory;

public class OrderFactory
{
    public MoneyModel? MoneyModel { get; private set; }
    
    private readonly Dictionary<int, (ProductModel productModel, int quantity)> _orderProducts = [];
    public decimal Total;
    
    public void AddProduct(ProductModel product, int quantity)
    {
        if (_orderProducts.TryGetValue(product.Id, out (ProductModel productModel, int quantity) value))
        {
            Total += value.productModel.CalculateTotal() * quantity;
            _orderProducts[product.Id] = (product, value.quantity + quantity);
            return;
        }
        Total += product.CalculateTotal() * quantity;
        _orderProducts.Add(product.Id, (product, quantity));
        if (MoneyModel == null) MoneyModel = product.Money;
    }

    public void RemoveProduct(int productId)
    {
        int oldQuantity = _orderProducts[productId].quantity;
        decimal productPrice = _orderProducts[productId].productModel.CalculateTotal();
        Total -= productPrice * oldQuantity;
        _orderProducts.Remove(productId);
    }

    public void ClearFactory()
    {
        MoneyModel = null;
        _orderProducts.Clear();
        Total = 0;
    }
    
    public void SetMoney(MoneyModel money)
    {
        MoneyModel = money;
    }
    
    public bool HasItems() => _orderProducts.Count != 0;
    
    public bool HasProduct(int id) => _orderProducts.ContainsKey(id);
    
    public async Task<OrderModel> GenerateOrder()
    {
        if (App.GetScopedService<IUserSession>().UserModel is null) throw new ApplicationException("IUserSession or UserModel is null");
        if (_orderProducts.Count == 0) throw new InvalidOperationException("There are no order products.");
        if (MoneyModel == null) throw new InvalidOperationException("There is no money model.");
        IDataWorker dataWorker = App.GetDataWorker();
        dataWorker.StartSession();
        OrderModel order = new OrderModel(
            0, // set it to 0 to indicate that the id needs to be generated by the db.
            // I know that it says that it may be null, but everything that could be checked beforehand is already checked on the first few lines of this function
            App.GetScopedService<IUserSession>().UserModel.Id,
            DateTime.Now,
            Total,
            OrderStatus.Incoming,
            MoneyModel.Id
        );
        
        List<OrderProductModel> orderProducts = [];
        foreach ((int _, (ProductModel product, int quantity)) in _orderProducts)
        {
            orderProducts.Add(new OrderProductModel(product, quantity));
        }
        dataWorker.OrderProduct.AddRangeWithParent(order, orderProducts);
        
        await dataWorker.FinishSessionAsync();
        
        // this is now a correct id sourced from the database if everything works correctly
        //int orderId = order.Id;
        
        return order;
    }

    public Dictionary<int, (ProductModel product, int quantity)> GetProducts() => _orderProducts;
}